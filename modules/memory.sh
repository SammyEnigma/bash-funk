#!/usr/bin/env bash
#
# Copyright (c) 2015-2017 Vegard IT GmbH, http://vegardit.com
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# @author Sebastian Thomschke, Vegard IT GmbH
# @author Patrick Spielmann, Vegard IT GmbH

#
# THIS FILE IS GENERATED BY BASH-FUNK GENERATOR
#

function -alloc-mem() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... MEMORY_IN_MB

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _MEMORY_IN_MB
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... MEMORY_IN_MB"
                echo 
                echo "Allocates the given amount of RAM."
                echo 
                echo "Requirements:"
                echo "  + Command 'python' must be available."
                echo 
                echo "Parameters:"
                echo -e "  \033[1mMEMORY_IN_MB\033[22m (required)"
                echo "      Amount of RAM in MB to allocate."
                echo 
                echo "Options:"
                echo -e "\033[1m    --help\033[22m "
                echo "        Prints this help."
                echo -e "\033[1m    --selftest\033[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \033[1m$fn --help\033[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo -e "--> [32mOK[0m"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_MEMORY_IN_MB ]]; then
            _MEMORY_IN_MB=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_MEMORY_IN_MB ]]; then
        if [[ ! "$_MEMORY_IN_MB" =~ ^-?[0-9]*$ ]]; then echo "$fn: Error: Value '$_MEMORY_IN_MB' for parameter MEMORY_IN_MB is not a numeric value.$hint"; return 1; fi
        if [[ $_MEMORY_IN_MB -lt 1 ]]; then echo "$fn: Error: Value '$_MEMORY_IN_MB' for parameter MEMORY_IN_MB is too low. Must be >= 1.$hint"; return 1; fi
        true
    else
        echo "$fn: Error: Parameter MEMORY_IN_MB must be specified.$hint"; return 1
    fi
    
    if ! hash "python" &> /dev/null; then echo "$fn: Error: Required command 'python' not found on this system.$hint"; return 1; fi
    
    ######################################################

echo -n "Allocating ${_MEMORY_IN_MB} MB of memory (may take a moment)..."
python -c "
a='1'*1024*1024*${_MEMORY_IN_MB}
print 'DONE'
raw_input('Press enter to exit...')
"

}
function _-alloc-mem() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-alloc-mem -- ${BASH_FUNK_PREFIX:-}-alloc-mem

function -memfree() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... [MEMORY_UNIT]

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _MEMORY_UNIT
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... [MEMORY_UNIT]"
                echo 
                echo "Prints the free memory (in KB by default)."
                echo 
                echo "Parameters:"
                echo -e "  \033[1mMEMORY_UNIT\033[22m "
                echo "      KB, MB or GB."
                echo 
                echo "Options:"
                echo -e "\033[1m    --help\033[22m "
                echo "        Prints this help."
                echo -e "\033[1m    --selftest\033[22m "
                echo "        Performs a self-test."
                echo 
                echo "Examples:"
                echo -e "$ \033[1m$fn \033[22m"
                echo "1036560"
                echo -e "$ \033[1m$fn MB\033[22m"
                echo "1012"
                echo -e "$ \033[1m$fn GB\033[22m"
                echo "1"
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \033[1m$fn --help\033[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo -e "--> [32mOK[0m"
                echo -e "$ \033[1m$fn \033[22m"
                stdout=$($fn ); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo -e "$ \033[1m$fn MB\033[22m"
                stdout=$($fn MB); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo -e "$ \033[1m$fn GB\033[22m"
                stdout=$($fn GB); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_MEMORY_UNIT && ${#params[@]} > 0 ]]; then
            _MEMORY_UNIT=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_MEMORY_UNIT ]]; then
        declare -A allowed=( [KB]=1 [MB]=1 [GB]=1 )
        if [[ ! ${allowed[$_MEMORY_UNIT]} ]]; then echo "$fn: Error: Value '$_MEMORY_UNIT' for parameter MEMORY_UNIT is not one of the allowed values [KB,MB,GB].$hint"; return 1; fi
        unset allowed
        true
    fi
    
    
    ######################################################

local totalMem=$(awk '/MemFree/ {print $2}' /proc/meminfo)
local totalMemUnit=$(awk '/MemFree/ {print $3}' /proc/meminfo)

case ${totalMemUnit} in
    [Kk][Bb])
        local memTotalKB=$totalMem
        ;;
    [Mm][Bb])
        local memTotalKB=$(( totalMem * 1024 ))
        ;;
    [Gg][Bb])
        local memTotalKB=$(( totalMem * 1024 * 1024 ))
        ;;
    *)
        echo "Error: Unsupported memory unit ${totalMemUnit} encountered."
        return 1
        ;;
esac

case ${_MEMORY_UNIT:-KB} in
    KB)
        echo $memTotalKB
        ;;
    MB)
        echo $(( memTotalKB / 1024 ))
        ;;
    GB)
        echo $(( memTotalKB / 1024 / 1024 ))
        ;;
esac

}
function _-memfree() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-memfree -- ${BASH_FUNK_PREFIX:-}-memfree

function -meminfo() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]...

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]..."
                echo 
                echo "Prints memory information from /proc/meminfo."
                echo 
                echo "Options:"
                echo -e "\033[1m    --help\033[22m "
                echo "        Prints this help."
                echo -e "\033[1m    --selftest\033[22m "
                echo "        Performs a self-test."
                echo 
                echo "Examples:"
                echo -e "$ \033[1m$fn \033[22m"
                echo 
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \033[1m$fn --help\033[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo -e "--> [32mOK[0m"
                echo -e "$ \033[1m$fn \033[22m"
                stdout=$($fn ); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^.*MemTotal.*MemFree.*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [.*MemTotal.*MemFree.*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    
    
    ######################################################

cat /proc/meminfo

}
function _-meminfo() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-meminfo -- ${BASH_FUNK_PREFIX:-}-meminfo

function -memtotal() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... [MEMORY_UNIT]

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _MEMORY_UNIT
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... [MEMORY_UNIT]"
                echo 
                echo "Prints the total memory (in KB by default)."
                echo 
                echo "Parameters:"
                echo -e "  \033[1mMEMORY_UNIT\033[22m "
                echo "      KB, MB or GB."
                echo 
                echo "Options:"
                echo -e "\033[1m    --help\033[22m "
                echo "        Prints this help."
                echo -e "\033[1m    --selftest\033[22m "
                echo "        Performs a self-test."
                echo 
                echo "Examples:"
                echo -e "$ \033[1m$fn \033[22m"
                echo "1036560"
                echo -e "$ \033[1m$fn MB\033[22m"
                echo "1012"
                echo -e "$ \033[1m$fn GB\033[22m"
                echo "1"
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \033[1m$fn --help\033[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo -e "--> [32mOK[0m"
                echo -e "$ \033[1m$fn \033[22m"
                stdout=$($fn ); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo -e "$ \033[1m$fn MB\033[22m"
                stdout=$($fn MB); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo -e "$ \033[1m$fn GB\033[22m"
                stdout=$($fn GB); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^[1-9][0-9]*$"
                if [[ ! "$stdout" =~ $regex ]]; then echo -e "--> [31mFAILED[0m - stdout [$stdout] does not match required pattern [[1-9][0-9]*].$hint"; return 1; fi
                echo "--> [32mOK[0m"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_MEMORY_UNIT && ${#params[@]} > 0 ]]; then
            _MEMORY_UNIT=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_MEMORY_UNIT ]]; then
        declare -A allowed=( [KB]=1 [MB]=1 [GB]=1 )
        if [[ ! ${allowed[$_MEMORY_UNIT]} ]]; then echo "$fn: Error: Value '$_MEMORY_UNIT' for parameter MEMORY_UNIT is not one of the allowed values [KB,MB,GB].$hint"; return 1; fi
        unset allowed
        true
    fi
    
    
    ######################################################

local totalMem=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
local totalMemUnit=$(awk '/MemTotal/ {print $3}' /proc/meminfo)

case ${totalMemUnit} in
    [Kk][Bb])
        local memTotalKB=$totalMem
        ;;
    [Mm][Bb])
        local memTotalKB=$(( totalMem * 1024 ))
        ;;
    [Gg][Bb])
        local memTotalKB=$(( totalMem * 1024 * 1024 ))
        ;;
    *)
        echo "Error: Unsupported memory unit ${totalMemUnit} encountered."
        return 1
        ;;
esac

case ${_MEMORY_UNIT:-KB} in
    KB)
        echo $memTotalKB
        ;;
    MB)
        echo $(( memTotalKB / 1024 ))
        ;;
    GB)
        echo $(( memTotalKB / 1024 / 1024 ))
        ;;
esac

}
function _-memtotal() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-memtotal -- ${BASH_FUNK_PREFIX:-}-memtotal

function -test-memory() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]...

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]..."
                echo 
                echo "Performs a selftest of all functions of this module by executing each function with option '--selftest'."
                echo 
                echo "Options:"
                echo -e "\033[1m    --help\033[22m "
                echo "        Prints this help."
                echo -e "\033[1m    --selftest\033[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \033[1m$fn --help\033[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo -e "--> [31mFAILED[0m - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo -e "--> [32mOK[0m"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    
    
    ######################################################

${BASH_FUNK_PREFIX:-}-alloc-mem --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-memfree --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-meminfo --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-memtotal --selftest && echo || return 1
}
function _-test-memory() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-test-memory -- ${BASH_FUNK_PREFIX:-}-test-memory

function -help-memory() {

    echo -e "\033[1m${BASH_FUNK_PREFIX:-}-alloc-mem MEMORY_IN_MB\033[0m  -  Allocates the given amount of RAM."
    echo -e "\033[1m${BASH_FUNK_PREFIX:-}-memfree [MEMORY_UNIT]\033[0m  -  Prints the free memory (in KB by default)."
    echo -e "\033[1m${BASH_FUNK_PREFIX:-}-meminfo\033[0m  -  Prints memory information from /proc/meminfo."
    echo -e "\033[1m${BASH_FUNK_PREFIX:-}-memtotal [MEMORY_UNIT]\033[0m  -  Prints the total memory (in KB by default)."
    echo -e "\033[1m${BASH_FUNK_PREFIX:-}-test-memory\033[0m  -  Performs a selftest of all functions of this module by executing each function with option '--selftest'."

}

