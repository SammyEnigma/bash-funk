#!/bin/bash
#
# Copyright (c) 2015-2017 Vegard IT GmbH, http://vegardit.com
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# @author Sebastian Thomschke, Vegard IT GmbH
# @author Patrick Spielmann, Vegard IT GmbH

#
# THIS FILE IS GENERATED BY BASH-FUNK GENERATOR
#

function -command-exists() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... COMMAND

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _verbose _COMMAND
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... COMMAND"
                echo 
                echo "Checks if the given program or function is available."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mCOMMAND\e[22m (required)"
                echo "      Name of the program or function."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo -e "\e[1m-v, --verbose\e[22m "
                echo "        Prints additional information during command execution."
                echo 
                echo "Examples:"
                echo -e "$ \e[1m$fn hash\e[22m"
                echo 
                echo -e "$ \e[1m$fn -v hash\e[22m"
                echo "'hash' is available."
                echo -e "$ \e[1m$fn -v ls\e[22m"
                echo "'ls' is available."
                echo -e "$ \e[1m$fn -v name-of-nonexistant-command\e[22m"
                echo "'name-of-nonexistant-command' not found."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn hash\e[22m"
                stdout=$($fn hash); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern [].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn -v hash\e[22m"
                stdout=$($fn -v hash); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^'hash' is available.$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern ['hash' is available.].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn -v ls\e[22m"
                stdout=$($fn -v ls); rc=$?
                echo $stdout
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                regex="^'ls' is available.$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern ['ls' is available.].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn -v name-of-nonexistant-command\e[22m"
                stdout=$($fn -v name-of-nonexistant-command); rc=$?
                echo $stdout
                if [[ $rc != 1 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [1].$hint"; return 1; fi
                regex="^'name-of-nonexistant-command' not found.$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern ['name-of-nonexistant-command' not found.].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            --verbose|-v)
                _verbose=true
            ;;
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_COMMAND ]]; then
            _COMMAND=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_COMMAND ]]; then
        true
    else
        echo "$fn: Error: Parameter COMMAND must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if hash "$_COMMAND" &>/dev/null; then
    [[ $_verbose ]] && echo "'${_COMMAND}' is available." || :
    return 0
else
    [[ $_verbose ]] && echo "'${_COMMAND}' not found." || :
    return 1
fi

}
function _-command-exists() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest --verbose -v "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-command-exists -- ${BASH_FUNK_PREFIX:-}-command-exists

function -pkg-installed() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... PACKAGE_NAME

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _verbose _PACKAGE_NAME
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... PACKAGE_NAME"
                echo 
                echo "Determines if the given software package is installed."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mPACKAGE_NAME\e[22m (required)"
                echo "      Name of the package."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo -e "\e[1m-v, --verbose\e[22m "
                echo "        Prints additional information during command execution."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            --verbose|-v)
                _verbose=true
            ;;
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_PACKAGE_NAME ]]; then
            _PACKAGE_NAME=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_PACKAGE_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter PACKAGE_NAME must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if hash "yum" &> /dev/null; then
    if yum list installed "${_PACKAGE_NAME}" >/dev/null 2>&1; then
        [[ $_verbose ]] && echo "${_PACKAGE_NAME} is installed." || :
        return 0
    fi

elif hash "dpkg-query" &> /dev/null; then
    if dpkg-query -Wf'${Status}' "${_PACKAGE_NAME}" 2>/dev/null | grep -q "install ok installed" >/dev/null; then
        [[ $_verbose ]] && echo "${_PACKAGE_NAME} is installed." || :
        return 0
    fi

elif hash "cygcheck" &> /dev/null; then
    if cygcheck "${_PACKAGE_NAME}" >/dev/null 2>&1; then
        [[ $_verbose ]] && echo "${_PACKAGE_NAME} is installed." || :
        return 0
    fi

elif hash "rpm" &> /dev/null; then
    if rpm -q openssh >/dev/null; then
        [[ $_verbose ]] && echo "${_PACKAGE_NAME} is installed." || :
        return 0
    fi

else
    echo "Error: Unable to determine installation status of ${_PACKAGE_NAME}. No supported package manager found." || :
    return 2
fi

[[ $_verbose ]] && echo "${_PACKAGE_NAME} is NOT installed." || :
return 1

}
function _-pkg-installed() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest --verbose -v "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-pkg-installed -- ${BASH_FUNK_PREFIX:-}-pkg-installed

function -test-os() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]...

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]..."
                echo 
                echo "Performs a selftest of all functions of this module by executing each function with option '--selftest'."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    
    
    ######################################################

${BASH_FUNK_PREFIX:-}-command-exists --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-pkg-installed --selftest && echo || return 1
}
function _-test-os() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-test-os -- ${BASH_FUNK_PREFIX:-}-test-os

function -help-os() {

    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-command-exists COMMAND\e[0m  -  Checks if the given program or function is available."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-pkg-installed PACKAGE_NAME\e[0m  -  Determines if the given software package is installed."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-test-os\e[0m  -  Performs a selftest of all functions of this module by executing each function with option '--selftest'."

}

