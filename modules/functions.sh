#!/bin/bash
#
# Copyright (c) 2015-2017 Vegard IT GmbH, http://vegardit.com
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# @author Sebastian Thomschke, Vegard IT GmbH
# @author Patrick Spielmann, Vegard IT GmbH

#
# THIS FILE IS GENERATED BY BASH-FUNK GENERATOR
#

function -fn-copy() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _OLD_FUNC_NAME _NEW_FUNC_NAME
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME"
                echo 
                echo "Creates an in-memory copy of the Bash function with the given name."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mOLD_FUNC_NAME\e[22m (required)"
                echo "      Name of the function to copy."
                echo -e "  \e[1mNEW_FUNC_NAME\e[22m (required)"
                echo "      Name of the function copy."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_OLD_FUNC_NAME ]]; then
            _OLD_FUNC_NAME=$param
            continue
        fi
        if [[ ! $_NEW_FUNC_NAME ]]; then
            _NEW_FUNC_NAME=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_OLD_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter OLD_FUNC_NAME must be specified.$hint"; return 1
    fi
    if [[ $_NEW_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter NEW_FUNC_NAME must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if ! declare -F $_OLD_FUNC_NAME > /dev/null; then
    echo "Error: A function with the name $_OLD_FUNC_NAME does not exist."
    return 1
fi
eval "$(echo "$_NEW_FUNC_NAME()"; declare -f $_OLD_FUNC_NAME | tail -n +2)"

}
function _-fn-copy() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-fn-copy -- ${BASH_FUNK_PREFIX:-}-fn-copy

function -fn-exists() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... FUNC_NAME

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _verbose _FUNC_NAME
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... FUNC_NAME"
                echo 
                echo "Determines if a Bash function with the given name exists."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mFUNC_NAME\e[22m (required)"
                echo "      Name of the function to determine."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo -e "\e[1m-v, --verbose\e[22m "
                echo "        Prints additional information during command execution."
                echo 
                echo "Examples:"
                echo -e "$ \e[1m$fn name-of-nonexistant-function\e[22m"
                echo 
                echo -e "$ \e[1m$fn -v name-of-nonexistant-function\e[22m"
                echo "A function with the name 'name-of-nonexistant-function' does not exist."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn name-of-nonexistant-function\e[22m"
                stdout=$($fn name-of-nonexistant-function); rc=$?
                echo $stdout
                if [[ $rc != 1 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [1].$hint"; return 1; fi
                regex="^$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern [].$hint"; return 1; fi
                echo "--> OK"
                echo -e "$ \e[1m$fn -v name-of-nonexistant-function\e[22m"
                stdout=$($fn -v name-of-nonexistant-function); rc=$?
                echo $stdout
                if [[ $rc != 1 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [1].$hint"; return 1; fi
                regex="^A function with the name 'name-of-nonexistant-function' does not exist.$"
                if [[ ! "$stdout" =~ $regex ]]; then echo "--> FAILED - stdout [$stdout] does not match required pattern [A function with the name 'name-of-nonexistant-function' does not exist.].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            --verbose|-v)
                _verbose=true
            ;;
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_FUNC_NAME ]]; then
            _FUNC_NAME=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter FUNC_NAME must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if declare -F $_FUNC_NAME> /dev/null; then
    [[ $_verbose ]] && echo "A function with the name '$_FUNC_NAME' exists." || :
    return 0
else
    [[ $_verbose ]] && echo "A function with the name '$_FUNC_NAME' does not exist." || :
    return 1
fi

}
function _-fn-exists() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest --verbose -v "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-fn-exists -- ${BASH_FUNK_PREFIX:-}-fn-exists

function -fn-rename() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _OLD_FUNC_NAME _NEW_FUNC_NAME
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME"
                echo 
                echo "Renames the Bash function with the given name."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mOLD_FUNC_NAME\e[22m (required)"
                echo "      Current name of the function."
                echo -e "  \e[1mNEW_FUNC_NAME\e[22m (required)"
                echo "      New name for the function ."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_OLD_FUNC_NAME ]]; then
            _OLD_FUNC_NAME=$param
            continue
        fi
        if [[ ! $_NEW_FUNC_NAME ]]; then
            _NEW_FUNC_NAME=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_OLD_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter OLD_FUNC_NAME must be specified.$hint"; return 1
    fi
    if [[ $_NEW_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter NEW_FUNC_NAME must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if ! declare -F $_OLD_FUNC_NAME > /dev/null; then
    echo "Error: A function with the name $_OLD_FUNC_NAME does not exist."
    return 1
fi

eval "$(echo "$_NEW_FUNC_NAME()"; declare -f $_OLD_FUNC_NAME | tail -n +2)"

unset -f $_OLD_FUNC_NAME

}
function _-fn-rename() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-fn-rename -- ${BASH_FUNK_PREFIX:-}-fn-rename

function -fn-unload() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest _verbose _OLD_FUNC_NAME _NEW_FUNC_NAME
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]... OLD_FUNC_NAME NEW_FUNC_NAME"
                echo 
                echo "Unloads the Bash function with the given name."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mOLD_FUNC_NAME\e[22m (required)"
                echo "      Current name of the function."
                echo -e "  \e[1mNEW_FUNC_NAME\e[22m (required)"
                echo "      New name for the function ."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo -e "\e[1m-v, --verbose\e[22m "
                echo "        Prints additional information during command execution."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            --verbose|-v)
                _verbose=true
            ;;
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_OLD_FUNC_NAME ]]; then
            _OLD_FUNC_NAME=$param
            continue
        fi
        if [[ ! $_NEW_FUNC_NAME ]]; then
            _NEW_FUNC_NAME=$param
            continue
        fi
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_OLD_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter OLD_FUNC_NAME must be specified.$hint"; return 1
    fi
    if [[ $_NEW_FUNC_NAME ]]; then
        true
    else
        echo "$fn: Error: Parameter NEW_FUNC_NAME must be specified.$hint"; return 1
    fi
    
    
    ######################################################

if ! declare -F $_OLD_FUNC_NAME > /dev/null; then
    [[ $_verbose ]] && echo "A function with the name '$_OLD_FUNC_NAME' does not exist." || :
    return 0
fi

unset -f $_OLD_FUNC_NAME

}
function _-fn-unload() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest --verbose -v "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-fn-unload -- ${BASH_FUNK_PREFIX:-}-fn-unload

function -test-functions() {

    [[ -p /dev/stdout ]] && local _in_pipe=1 || local _in_pipe=
    [ -t 1 ] && local _in_subshell= || local _in_subshell=1
    local fn=${FUNCNAME[0]}
    [[ $_in_pipe || $_in_subshell ]] && local hint= || local hint="

Usage: $fn [OPTION]...

Type '$fn --help' for more details."
    local arg optionWithValue params=() _help _selftest
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: $fn [OPTION]..."
                echo 
                echo "Performs a selftest of all functions of this module by executing each function with option '--selftest'."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [$fn]..."
                echo -e "$ \e[1m$fn --help\e[22m"
                local regex stdout rc
                stdout=$($fn --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0].$hint"; return 1; fi
                echo "--> OK"
                echo "Testing function [$fn]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "$fn: invalid option: '$arg'"
                echo Type \'$fn --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        echo "$fn: Error: too many parameters: '$param'$hint"
        return 1
    done
    unset param params leftoverParams
    
    
    
    
    ######################################################

${BASH_FUNK_PREFIX:-}-fn-copy --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-fn-exists --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-fn-rename --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-fn-unload --selftest && echo || return 1
}
function _-test-functions() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-test-functions -- ${BASH_FUNK_PREFIX:-}-test-functions

function -help-functions() {

    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-fn-copy OLD_FUNC_NAME NEW_FUNC_NAME\e[0m  -  Creates an in-memory copy of the Bash function with the given name."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-fn-exists FUNC_NAME\e[0m  -  Determines if a Bash function with the given name exists."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-fn-rename OLD_FUNC_NAME NEW_FUNC_NAME\e[0m  -  Renames the Bash function with the given name."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-fn-unload OLD_FUNC_NAME NEW_FUNC_NAME\e[0m  -  Unloads the Bash function with the given name."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-test-functions\e[0m  -  Performs a selftest of all functions of this module by executing each function with option '--selftest'."

}

