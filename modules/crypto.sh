#!/bin/bash
#
# Copyright (c) 2015-2017 Vegard IT GmbH, http://vegardit.com
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# @author Sebastian Thomschke, Vegard IT GmbH
# @author Patrick Spielmann, Vegard IT GmbH

#
# THIS FILE IS GENERATED BY BASH-FUNK GENERATOR
#
    
function -md5sum() {

    local arg optionWithValue params=() _help _selftest _PATH_TO_FILE
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: ${FUNCNAME[0]} [OPTION]... PATH_TO_FILE"
                echo 
                echo "Calculates the MD5 hash of the given file."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mPATH_TO_FILE\e[22m (required)"
                echo "      The file."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [${FUNCNAME[0]}]..."
                echo -e "$ \e[1m${FUNCNAME[0]} --help\e[22m"
                local regex stdout rc
                stdout=$(${FUNCNAME[0]} --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0]."; return 1; fi
                echo "--> OK"
                echo "Testing function [${FUNCNAME[0]}]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "${FUNCNAME[0]}: invalid option: '$arg'"
                echo Type \'${FUNCNAME[0]} --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_PATH_TO_FILE ]]; then
            _PATH_TO_FILE=$param
            continue
        fi
        echo "${FUNCNAME[0]}: too many parameters: '$param'"
        echo Type \'${FUNCNAME[0]} --help\' for usage.
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_PATH_TO_FILE ]]; then
        true
    else
        echo "Error: Parameter PATH_TO_FILE must be specified."; return 1
    fi
    
    
    ######################################################


# use md5sum if available
if hash md5sum &>/dev/null; then
    md5sum $_PATH_TO_FILE | cut -d ' ' -f1

# use perl if available
elif hash perl &> /dev/null; then
    perl << EOF
use Digest::MD5;
open(my \$FILE, '$_PATH_TO_FILE');
binmode(\$FILE);
print Digest::MD5->new->addfile(\$FILE)->hexdigest, "\n";
close(\$FILE);
EOF

# use python as last resort
else
    python -c "import hashlib
print hashlib.md5(open('$_PATH_TO_FILE').read()).hexdigest()"
fi


}
function _-md5sum() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-md5sum -- ${BASH_FUNK_PREFIX:-}-md5sum
    
function -sha256sum() {

    local arg optionWithValue params=() _help _selftest _PATH_TO_FILE
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: ${FUNCNAME[0]} [OPTION]... PATH_TO_FILE"
                echo 
                echo "Calculates the SHA256 hash of the given file."
                echo 
                echo "Parameters:"
                echo -e "  \e[1mPATH_TO_FILE\e[22m (required)"
                echo "      The file."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [${FUNCNAME[0]}]..."
                echo -e "$ \e[1m${FUNCNAME[0]} --help\e[22m"
                local regex stdout rc
                stdout=$(${FUNCNAME[0]} --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0]."; return 1; fi
                echo "--> OK"
                echo "Testing function [${FUNCNAME[0]}]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "${FUNCNAME[0]}: invalid option: '$arg'"
                echo Type \'${FUNCNAME[0]} --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        if [[ ! $_PATH_TO_FILE ]]; then
            _PATH_TO_FILE=$param
            continue
        fi
        echo "${FUNCNAME[0]}: too many parameters: '$param'"
        echo Type \'${FUNCNAME[0]} --help\' for usage.
        return 1
    done
    unset param params leftoverParams
    
    
    if [[ $_PATH_TO_FILE ]]; then
        true
    else
        echo "Error: Parameter PATH_TO_FILE must be specified."; return 1
    fi
    
    
    ######################################################


# use sha256 if available
if hash sha256 &>/dev/null; then
    sha256 $_PATH_TO_FILE | cut -d ' ' -f1

# use perl if available
elif hash perl &> /dev/null; then
    perl << EOF
use Digest::SHA;
open(my \$FILE, '$_PATH_TO_FILE');
binmode(\$FILE);
print Digest::SHA->new(256)->addfile(\$FILE)->hexdigest, "\n";
close(\$FILE);
EOF

# use python as last resort
else
    python -c "import hashlib
print hashlib.sha256(open('$_PATH_TO_FILE').read()).hexdigest()"
fi


}
function _-sha256sum() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-sha256sum -- ${BASH_FUNK_PREFIX:-}-sha256sum
    
function -test-crypto() {

    local arg optionWithValue params=() _help _selftest
    for arg in "$@"; do
        case $arg in
    
            --help)
                echo "Usage: ${FUNCNAME[0]} [OPTION]..."
                echo 
                echo "Performs a selftest of all functions of this module by executing each function with option '--selftest'."
                echo 
                echo "Options:"
                echo -e "\e[1m    --help\e[22m "
                echo "        Prints this help."
                echo -e "\e[1m    --selftest\e[22m "
                echo "        Performs a self-test."
                echo 
                return 0
              ;;
    
            --selftest)
                echo "Testing function [${FUNCNAME[0]}]..."
                echo -e "$ \e[1m${FUNCNAME[0]} --help\e[22m"
                local regex stdout rc
                stdout=$(${FUNCNAME[0]} --help); rc=$?
                if [[ $rc != 0 ]]; then echo "--> FAILED - exit code [$rc] instead of expected [0]."; return 1; fi
                echo "--> OK"
                echo "Testing function [${FUNCNAME[0]}]...DONE"
                return 0
              ;;
    
    
    
            -*)
                echo "${FUNCNAME[0]}: invalid option: '$arg'"
                echo Type \'${FUNCNAME[0]} --help\' for usage.
                return 1
              ;;
    
            *)
                case $optionWithValue in
                    *)
                        params+=("$arg")
                esac
              ;;
        esac
    done
    unset arg optionWithValue
    
    for param in "${params[@]}"; do
        echo "${FUNCNAME[0]}: too many parameters: '$param'"
        echo Type \'${FUNCNAME[0]} --help\' for usage.
        return 1
    done
    unset param params leftoverParams
    
    
    
    
    ######################################################

${BASH_FUNK_PREFIX:-}-md5sum --selftest && echo || return 1
${BASH_FUNK_PREFIX:-}-sha256sum --selftest && echo || return 1
}
function _-test-crypto() {
    local currentWord=${COMP_WORDS[COMP_CWORD]}
    if [[ ${currentWord} == -* ]]; then
        local options=" --help --selftest "
        for o in ${COMP_WORDS[@]}; do options=${options/ $o / }; done
        COMPREPLY=($(compgen -o default -W '$options' -- $currentWord))
    else
        COMPREPLY=($(compgen -o default -- $currentWord))
    fi
}
complete -F _${BASH_FUNK_PREFIX:-}-test-crypto -- ${BASH_FUNK_PREFIX:-}-test-crypto

function -help-crypto() {

    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-md5sum PATH_TO_FILE\e[0m  -  Calculates the MD5 hash of the given file."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-sha256sum PATH_TO_FILE\e[0m  -  Calculates the SHA256 hash of the given file."
    echo -e "\e[1m${BASH_FUNK_PREFIX:-}-test-crypto\e[0m  -  Performs a selftest of all functions of this module by executing each function with option '--selftest'."

}

